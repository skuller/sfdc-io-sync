<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:secure-property-placeholder="http://www.mulesoft.org/schema/mule/secure-property-placeholder"
  xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.mulesoft.org/schema/mule/secure-property-placeholder http://www.mulesoft.org/schema/mule/secure-property-placeholder/current/mule-secure-property-placeholder.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd">

  <batch:job name="sfdc-io-header-syncBatch" max-failed-records="100000">
    <batch:input>
      <poll doc:name="Poll-IO">
        <fixed-frequency-scheduler frequency="5" timeUnit="MINUTES" />
        <watermark variable="waterMarkIO" default-expression="${sfdc.watermark.io.datetime}" selector="MAX" selector-expression="#[payload.Integration_Watermark__c]" />
                <sfdc:query config-ref="Salesforce" query="${sfdc.io.query}" fetchSize="1000" doc:name="Salesforce - GetIOs"/>
      </poll>
            <logger message="sfdc-io-header-syncBatch #[payload.size()] orders from ${sfdc.io.query}" level="INFO" doc:name="Logger"/>
            <flow-ref name="filterSFDCResults" doc:name="filterSFDCResults"/>
    </batch:input>

    <batch:process-records>
      <batch:step name="Batch_Step:InitialProcess">
                <logger message="#[payload.IO_Header__c + ', ' + payload.Integration_Watermark__c + ', ' + flowVars.waterMarkIO]" level="INFO" doc:name="Logger"/>
        <dw:transform-message metadata:id="e6392528-01b8-4edb-bcab-f063c907b46b" doc:name="mapIOHeaderAndIOForOracle">
          <dw:input-payload doc:sample="sample_data/map.dwl" mimeType="application/java" />
          <dw:set-payload>
            <![CDATA[%dw 1.0
                  %output application/java
                  %function formatDate(sfDate)  ((sfDate splitBy "T") joinBy " ") as :localdatetime {format:"yyyy-MM-dd HH:mm:ss.SSS'Z'"} as :string {format:"yyyy-MM-dd HH:mm:ss"}
                  ---
                  {
                    header:{  
                      ORDER_NUMBER: payload.IO_Header__c,
                      SOLD_TO_CUSTOMER: payload.AccountID__r.ERP_Customer_Num__c,
                      INVOICE_TO_ORG: payload.Bill_To__r.ERP_Customer_Num__c,
                      IO_HEADER_NAME: payload.Name,
                      TRANSACTIONAL_CURR_CODE: payload.CurrencyIsoCode__c,
                      OPPTY_SEQ_HDR: payload.Opportunity__c,
                      OPERATING_UNIT: payload.Operating_Unit_Temp__c,
                      PAYMENT_TERM: payload.Payment_Terms__c,
                      AGENCY_NAME: payload.Agency_Name__r.Name,
                      SALESREP: payload.Owner.Name,
                      AGREEMENT: payload.LOI_Agreement__r.Agreement_Number__c,
                      OPPORTUNITY_SALES_TYPE: payload.Opportunity_Sales_Type__c,
                      Is_IO_Header_Absent_Flag: "FALSE",
                      QUEUE_TYPE: "New Order",
                      STATUS_FLAG: "NEW",
                      OP_MODE: "CREATE",
                      REVOLVING_IO_TYPE: "C",
                      (REVOLVING_IO_TYPE: "R") when payload.Opportunity__r.IO_Type__c == 'Revolving',
                      (REVOLVING_IO_TYPE: "A") when payload.Opportunity__r.IO_Type__c == 'Revolving' and payload.Bill_To__r.Type == 'Agency',
                      (START_DATE: formatDate(payload.Start_Date__c ++ " 00:00:00.000Z")) when payload.Start_Date__c != null,
                      (END_DATE: formatDate(payload.End_Date__c  ++ " 00:00:00.000Z")) when payload.End_Date__c != null,
                      CREDIT_CHECK_SRC: "SFDC"
                    },
                    line: (payload.IO_s__r filter ($ != null) map {
                    	lineExists:true,
                        IO_ID: $.Id,
                        ORDER_NUMBER: $.IO_Header__c,
                        IO_HEADER: $.IO_Header__c,
                        LINE_TYPE: $.Revenue_Type__c,
                        OPPTY_SEQ_LINE: $.IO_ID__c,
                        ORDERED_QUANTITY: 1,
                        SFDC_OPTY_LINE_ID: $.OppLineItemId__c,
                        (UNIT_SELLING_PRICE: $.IO_Budget__c  as :number {format: "##"}) when $.IO_Budget__c != null,
                        //SOLD_TO_CUSTOMER: $.Advertiser_ID__c,
                        SOLD_TO_CUSTOMER: $.Advertiser__r.ERP_Customer_Num__c,
                        IO_NUMBER: $.IO_ID__c,
                        IO_SUB_TYPE: $.IO_Sub_Type__c,
                        OP_MODE: "CREATE",
                        STATUS_FLAG: "NEW",
                        EXTERNAL_IO_ID: $.IO_ID__c,
                        PRODUCT_TYPE: $.Product_Type__c,                        
                        IO_TYPE: $.IO_Type__c,
                        (IO_TYPE: "Niche") when $.Product_Type__c == 'Niche',
                        (IO_TYPE: "Non-Exclusive") when $.IO_Type__c contains 'Non-Exclusive',
                        IO_VALUE_ADD_TYPE: $.Value_Add_Type__c,
                        (EXPIRATION_DATE: formatDate($.Actual_Expiration_Date__c  ++ " 00:00:00.000Z")) when $.Actual_Expiration_Date__c != null,
                        (IO_START_DATE: formatDate($.IO_Start_Date__c ++ " 00:00:00.000Z")) when $.IO_Start_Date__c != null,
                        (IO_END_DATE: formatDate($.IO_End_Date__c ++ " 00:00:00.000Z")) when $.IO_End_Date__c != null,
                        VALUE_ADD_TYPE: $.Value_Add_Type__c,
                        HANDLE: $.Handle__r.Name,
                        TREND_TYPE: $.Trend_Type__c,
                        OPPORTUNITY_SALES_TYPE: payload.Opportunity_Sales_Type__c,
                        DESCRIPTION: $.Description__c
                      }
                    ) when payload.IO_s__r != null otherwise {
                    	lineExists: false
                    }
                  }]]>
          </dw:set-payload>
        </dw:transform-message>
        <expression-component doc:name="evaluateHeaderExists?">
          <![CDATA[recordVars['headerExists'] = false;
              for (java.util.HashMap orderNumberMap: flowVars['orderNumbers']) {
                if (orderNumberMap['ORDER_NUMBER'].equalsIgnoreCase(payload.header['ORDER_NUMBER'])) {
                  recordVars['headerExists'] = true;
				  return;
                }
              }]]>
        </expression-component>
      </batch:step>

      <batch:step name="Batch_Step:InsertHeaderRecords" accept-expression="#[!recordVars['headerExists']]">
        <logger message="Inserting IO Header: #[payload.header['ORDER_NUMBER']]" level="INFO" doc:name="LogHeaderOrderNumber" />
        <batch:commit size="1000" doc:name="Batch Commit">
          <flow-ref name="insertHeaderRecords" doc:name="insertHeaderRecords" />
        </batch:commit>
      </batch:step>

      <batch:step name="Batch_Step:UpdateHeaderRecords" accept-expression="#[recordVars['headerExists']]">
        <logger message="Updating IO Header: #[payload.header['ORDER_NUMBER']]" level="INFO" doc:name="LogHeaderOrderNumber" />
        <batch:commit size="1000" doc:name="Batch Commit">
          <flow-ref name="updateHeaderRecords" doc:name="updateHeaderRecords" />
        </batch:commit>
      </batch:step>

      <batch:step name="Batch_Step:EvaluateLineRecords" accept-expression="#[payload.line.lineExists]">
        <set-payload value="#[payload.line]" doc:name="setPayloadToIO" />
        <flow-ref name="checkExistingLineRecord" doc:name="checkExistingLineRecord" />
        <batch:execute name="sfdc-io-syncBatch" doc:name="sfdc-io-syncBatch" />
      </batch:step>
    </batch:process-records>

    <batch:on-complete>
      <logger message="Completed Header Records #[payload.processedRecords] in time #[payload.elapsedTimeInMillis] ms. Watermark: #[flowVars.waterMarkIO]" level="INFO" doc:name="Logger" />
    </batch:on-complete>
  </batch:job>

  <batch:job name="sfdc-io-syncBatch" max-failed-records="100000">
    <batch:process-records>
      <batch:step name="Batch_Step:EvaluateLine">
        <expression-component doc:name="checkLineExists?"><![CDATA[recordVars['lineExists'] = false;
            for (java.util.HashMap lineResultMap: flowVars['lineResults']) {
              if (lineResultMap['ORDER_NUMBER'].equalsIgnoreCase(payload['ORDER_NUMBER']) && lineResultMap['IO_NUMBER'].equalsIgnoreCase(payload['IO_NUMBER'])) {
                recordVars['lineExists'] = true;
				return;
              }
            }]]></expression-component>
      </batch:step>
      <batch:step name="Batch_Step:InsertLineRecords" accept-expression="#[!recordVars['lineExists']]">
        <logger message="Insert IO: #[payload['ORDER_NUMBER']]:#[payload['IO_NUMBER']]" level="INFO" doc:name="LogItemIONumber" />
        <batch:commit size="1000" doc:name="Batch Commit">
          <flow-ref name="insertLineRecords" doc:name="insertLineRecords" />
        </batch:commit>
      </batch:step>
      <batch:step name="Batch_Step:UpdateLineRecords" accept-expression="#[recordVars['lineExists']]">
        <logger message="Update IO: #[payload['ORDER_NUMBER']]:#[payload['IO_NUMBER']]" level="INFO" doc:name="LogItemIONumber" />
        <batch:commit size="1000" doc:name="Batch Commit">
          <flow-ref name="updateLineRecords" doc:name="updateLineRecords" />
        </batch:commit>
      </batch:step>
      <batch:step name="Batch_Step:ProductDetails" accept-expression="#[payload['OPPORTUNITY_SALES_TYPE'] == 'Niche']">
        <batch:set-record-variable variableName="ORDER_NUMBER" value="#[payload['ORDER_NUMBER']]" doc:name="Record Variable" />
        <flow-ref name="sfdc-io-detailsFlow" doc:name="querySalesforceIODetails" />
      </batch:step>
    </batch:process-records>
    <batch:on-complete>
      <logger message="Completed Item Records #[payload.processedRecords] in time #[payload.elapsedTimeInMillis] ms" level="INFO" doc:name="Logger" />
    </batch:on-complete>
  </batch:job>

  <sub-flow name="filterSFDCResults">
    <scripting:component doc:name="copyInitialPayload">
      <scripting:script engine="Groovy"><![CDATA[List<Map<String,Object>> sfdcDataList = new ArrayList<Map<String,Object>>();
              while (payload.hasNext()) {
                   sfdcDataList.add(payload.next());
                }
            flowVars.initialPayload = sfdcDataList;
            return sfdcDataList;]]></scripting:script>
    </scripting:component>
    <expression-filter expression="#[payload != null &amp;&amp; payload.size() &gt; 0]" doc:name="filterNoResult" />
    <flow-ref name="checkExistingHeaderRecord" doc:name="checkExistingHeaderRecord" />
  </sub-flow>
  

  <flow name="checkExistingHeaderRecord">
    <enricher target="#[flowVars['orderNumbers']]" doc:name="Message Enricher">
      <processor-chain doc:name="Processor Chain">
                <scripting:component doc:name="createOrderNumberListForSelect">
                    <scripting:script engine="Groovy"><![CDATA[StringBuffer orderNumbers = new StringBuffer();
              for (Object order: flowVars.initialPayload) {
                orderNumbers.append("'");
                orderNumbers.append(order.IO_Header__c);
                orderNumbers.append("'");
                orderNumbers.append(",");                     
              }
              orderNumbers.substring(0,orderNumbers.length()-1);
            ]]></scripting:script>
                </scripting:component>
        <db:select config-ref="Oracle_Configuration" doc:name="DB: SelectOrderHeaderCount">
                    <db:dynamic-query><![CDATA[select ORDER_NUMBER from XXTWOE_ORDER_IMPRT_STG_HDR where ORDER_NUMBER in (#[payload])]]></db:dynamic-query>
        </db:select>
      </processor-chain>
    </enricher>
    <catch-exception-strategy doc:name="default-catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error checking existing header with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>


  <flow name="insertHeaderRecords">
    <db:insert config-ref="Oracle_Configuration" bulkMode="true" doc:name="DB:InsertIntoHeader">
            <db:parameterized-query><![CDATA[INSERT INTO XXTWOE_ORDER_IMPRT_STG_HDR(INVOICE_TO_ORG, END_DATE, SOLD_TO_CUSTOMER, ORDER_NUMBER, IO_HEADER_NAME, TRANSACTIONAL_CURR_CODE, OPPTY_SEQ_HDR, OPERATING_UNIT, PAYMENT_TERM, ORDER_TYPE, SALESREP, START_DATE, AGREEMENT, Is_IO_Header_Absent_Flag, OP_MODE , Revolving_IO_Type, QUEUE_TYPE,AGENCY_NAME,OPPORTUNITY_SALES_TYPE,STATUS_FLAG, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY, CREDIT_CHECK_SOURCE) 
 VALUES(#[payload.header['INVOICE_TO_ORG']],
        #[payload.header['END_DATE']],
        #[payload.header['SOLD_TO_CUSTOMER']],
        #[payload.header['ORDER_NUMBER']],
        #[payload.header['IO_HEADER_NAME']],
        #[payload.header['TRANSACTIONAL_CURR_CODE']],
        #[payload.header['OPPTY_SEQ_HDR']],
        #[payload.header['OPERATING_UNIT']],
        #[payload.header['PAYMENT_TERM']],
        #[payload.header['ORDER_TYPE']],
        #[payload.header['SALESREP']],
        #[payload.header['START_DATE']],
        #[payload.header['AGREEMENT']],
        #[payload.header['Is_IO_Header_Absent_Flag']],
        #[payload.header['OP_MODE']],
        #[payload.header['REVOLVING_IO_TYPE']],
        #[payload.header['QUEUE_TYPE']],
        #[payload.header['AGENCY_NAME']],
        #[payload.header['OPPORTUNITY_SALES_TYPE']],
        #[payload.header['STATUS_FLAG']],
        SYSDATE,
        '1392',
        SYSDATE,
        '1392',
        #[payload.header['CREDIT_CHECK_SRC']])]]></db:parameterized-query>
    </db:insert>
    <catch-exception-strategy doc:name="catch-exception-strategy">
            <logger message="Error inserting " level="ERROR" doc:name="Logger"/>
      <set-payload value="#[String.format(&quot;Error inserting header with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <flow name="updateHeaderRecords">
    <db:update config-ref="Oracle_Configuration" bulkMode="true" doc:name="DB:UpdateHeader">
            <db:parameterized-query><![CDATA[UPDATE XXTWOE_ORDER_IMPRT_STG_HDR
          SET INVOICE_TO_ORG = #[payload.header['INVOICE_TO_ORG']],
          END_DATE = #[payload.header['END_DATE']],
          SOLD_TO_CUSTOMER = #[payload.header['SOLD_TO_CUSTOMER']],
          IO_HEADER_NAME = #[payload.header['IO_HEADER_NAME']],
          TRANSACTIONAL_CURR_CODE = #[payload.header['TRANSACTIONAL_CURR_CODE']],
          OPPTY_SEQ_HDR = #[payload.header['OPPTY_SEQ_HDR']],
          OPERATING_UNIT = #[payload.header['OPERATING_UNIT']],
          PAYMENT_TERM = #[payload.header['PAYMENT_TERM']],
          ORDER_TYPE = #[payload.header['ORDER_TYPE']],
          SALESREP = #[payload.header['SALESREP']],
          START_DATE = #[payload.header['START_DATE']],
          AGREEMENT = #[payload.header['AGREEMENT']],
          Is_IO_Header_Absent_Flag = #[payload.header['Is_IO_Header_Absent_Flag']],
          Revolving_IO_Type = #[payload.header['REVOLVING_IO_TYPE']],
          OP_MODE = 'UPDATE',
          QUEUE_TYPE = #[payload.header['QUEUE_TYPE']],
          AGENCY_NAME = #[payload.header['AGENCY_NAME']],
          OPPORTUNITY_SALES_TYPE = #[payload.header['OPPORTUNITY_SALES_TYPE']],
          STATUS_FLAG = #[payload.header['STATUS_FLAG']],
          CREDIT_CHECK_SOURCE = #[payload.header['CREDIT_CHECK_SRC']],
          CREATION_DATE = SYSDATE,
          CREATED_BY = '1392',
          LAST_UPDATE_DATE = SYSDATE,
          LAST_UPDATED_BY = '1392'
          WHERE ORDER_NUMBER = #[payload.header['ORDER_NUMBER']]]]></db:parameterized-query>
    </db:update>
    <catch-exception-strategy doc:name="catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error updating header with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <flow name="checkExistingLineRecord">
    <enricher target="#[flowVars['lineResults']]" doc:name="Message Enricher">
      <processor-chain doc:name="Processor Chain">
        <scripting:component doc:name="createOrderIOListForSelect">
          <scripting:script engine="Groovy"><![CDATA[StringBuffer lineNumbers = new StringBuffer();
              StringBuffer ioNumbers = new StringBuffer();
              for (Object line: payload) {
               lineNumbers.append("'");
               lineNumbers.append(line.ORDER_NUMBER);
               lineNumbers.append("'");
               lineNumbers.append(",");
              
               ioNumbers.append("'");
               ioNumbers.append(line.IO_NUMBER);
               ioNumbers.append("'");
               ioNumbers.append(",");                       
              }
              flowVars['lineOrderNumbers'] = lineNumbers.substring(0,lineNumbers.length()-1);
              flowVars['ioNumbers'] = ioNumbers.substring(0,ioNumbers.length()-1);
                      ]]>
          </scripting:script>
        </scripting:component>
        <db:select config-ref="Oracle_Configuration" doc:name="DB: SelectOrderLineCount">
                    <db:dynamic-query><![CDATA[select ORDER_NUMBER, IO_NUMBER from XXTWOE_ORDER_IMPRT_STG_LINE where ORDER_NUMBER in (#[flowVars['lineOrderNumbers']]) and IO_NUMBER in (#[flowVars['ioNumbers']])]]></db:dynamic-query>
        </db:select>
      </processor-chain>
    </enricher>
    <catch-exception-strategy doc:name="catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error checking existing IOs with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <flow name="insertLineRecords">
    <enricher target="#[recordVars.insertLineResult]" doc:name="Message Enricher">
            <db:insert config-ref="Oracle_Configuration" bulkMode="true" doc:name="DB:InsertIO">
                <db:parameterized-query><![CDATA[INSERT INTO XXTWOE_ORDER_IMPRT_STG_LINE
  (
    ORDER_NUMBER,
    LINE_TYPE,
    OPPTY_SEQ_LINE,
    ORDERED_QUANTITY,
    SFDC_OPTY_LINE_ID,
    UNIT_SELLING_PRICE,
    SOLD_TO_CUSTOMER,
    IO_NUMBER,
    IO_TYPE,
    OP_MODE,
    IO_SUB_TYPE,
    STATUS_FLAG,
    EXTERNAL_IO_ID,
    PRODUCT_TYPE,
    INVENTORY_ITEM,
    EXPIRATION_DATE,
    START_DATE,
    END_DATE,
    IO_VALUE_ADD_TYPE,
    HANDLE,
    TREND_TYPE,
    PRODUCT_DESCRIPTION,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY
  )
  VALUES
  (
    #[payload['ORDER_NUMBER']],
    #[payload['LINE_TYPE']],
    #[payload['OPPTY_SEQ_LINE']],
    #[payload['ORDERED_QUANTITY']],
    #[payload['SFDC_OPTY_LINE_ID']],
    #[payload['UNIT_SELLING_PRICE']],
    #[payload['SOLD_TO_CUSTOMER']],
    #[payload['IO_NUMBER']],
    #[payload['IO_TYPE']],
    #[payload['OP_MODE']],
    #[payload['IO_SUB_TYPE']],
    #[payload['STATUS_FLAG']],
    #[payload['EXTERNAL_IO_ID']],
    #[payload['PRODUCT_TYPE']],
    #[payload['INVENTORY_ITEM']],
    TO_DATE( #[payload['EXPIRATION_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
    TO_DATE( #[payload['IO_START_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
    TO_DATE(#[payload['IO_END_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
    #[payload['IO_VALUE_ADD_TYPE']],
    #[payload['HANDLE']],
    #[payload['TREND_TYPE']],
    #[payload['DESCRIPTION']],
    SYSDATE,
    '1392',
    SYSDATE,
    '1392'
  )]]></db:parameterized-query>
            </db:insert>
    </enricher>
    <catch-exception-strategy doc:name="catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error inserting IOs with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <flow name="updateLineRecords">
    <enricher target="#[recordVars.updateLineResult]" doc:name="Message Enricher">
      <db:update config-ref="Oracle_Configuration" bulkMode="true" doc:name="DB:UpdateIO">
                <db:parameterized-query><![CDATA[UPDATE XXTWOE_ORDER_IMPRT_STG_LINE SET
            LINE_TYPE = #[payload['LINE_TYPE']],
            OPPTY_SEQ_LINE = #[payload['OPPTY_SEQ_LINE']],
            ORDERED_QUANTITY = #[payload['ORDERED_QUANTITY']],
            SFDC_OPTY_LINE_ID = #[payload['SFDC_OPTY_LINE_ID']],
            UNIT_SELLING_PRICE = #[payload['UNIT_SELLING_PRICE']],
            SOLD_TO_CUSTOMER = #[payload['SOLD_TO_CUSTOMER']],
            IO_TYPE = #[payload['IO_TYPE']],
            OP_MODE = 'UPDATE',
            STATUS_FLAG = #[payload['STATUS_FLAG']],
            IO_SUB_TYPE = #[payload['IO_SUB_TYPE']],
            EXTERNAL_IO_ID = #[payload['EXTERNAL_IO_ID']],
            PRODUCT_TYPE = #[payload['PRODUCT_TYPE']],
            INVENTORY_ITEM = #[payload['INVENTORY_ITEM']],
            EXPIRATION_DATE = TO_DATE( #[payload['EXPIRATION_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
            START_DATE = TO_DATE( #[payload['IO_START_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
            END_DATE = TO_DATE(#[payload['IO_END_DATE']], 'YYYY-MM-DD HH24:MI:SS'),
            IO_VALUE_ADD_TYPE = #[payload['IO_VALUE_ADD_TYPE']],
            TREND_TYPE = #[payload['TREND_TYPE']],
            HANDLE = #[payload['HANDLE']],
            PRODUCT_DESCRIPTION = #[payload['DESCRIPTION']],
            LAST_UPDATE_DATE = SYSDATE,
            LAST_UPDATED_BY = '1392'
            WHERE ORDER_NUMBER = #[payload['ORDER_NUMBER']] AND IO_NUMBER = #[payload['IO_NUMBER']]]]></db:parameterized-query>
      </db:update>
    </enricher>
    <catch-exception-strategy doc:name="catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error updating IOs with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <flow name="checkExistingIODetails">
    <enricher target="#[flowVars['detailResults']]" doc:name="Message Enricher">
      <processor-chain doc:name="Processor Chain">
        <scripting:component doc:name="createIDDetailList">
          <scripting:script engine="Groovy"><![CDATA[StringBuffer originiatingIds = new StringBuffer();
              for (String originiatingId: payload.originatingIds) {
                originiatingIds.append("'");
                originiatingIds.append(originiatingId);
                originiatingIds.append("'");
                originiatingIds.append(",");                     
              }
              originiatingIds.substring(0,originiatingIds.length()-1);
                       ]]></scripting:script>
        </scripting:component>
        <db:select config-ref="Oracle_Configuration" doc:name="DB:SelectExistingIODetails">
                    <db:dynamic-query><![CDATA[select ORIGINATING_ID from XXTWOE_ORDER_IMPRT_STG_PRODDET where ORIGINATING_ID in (#[payload])]]></db:dynamic-query>
        </db:select>
      </processor-chain>
    </enricher>
    <catch-exception-strategy doc:name="catch-exception-strategy">
      <set-payload value="#[String.format(&quot;Error checking existing IO Details with failure message: %s\n\nFailed Record:\n%s&quot;, exception.message.substring(0, exception.message.indexOf(&quot; Message&quot;)), payload)]" doc:name="Set Error Payload" />
      <flow-ref name="send_error_email" doc:name="send_error_email" />
    </catch-exception-strategy>
  </flow>

  <sub-flow name="send_error_email">
    <smtp:outbound-endpoint host="postmaster.smfc.twitter.com" to="${sfdc-data-replicate.smtp.notify.sendTo}" from="noreply@twitter.com" subject="Mule | ${env} | sfdc-data-sync error notification" responseTimeout="10000" transformer-refs="String_to_Email" doc:name="SMTP" />
  </sub-flow>
</mule>
